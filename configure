#!/usr/bin/env python3
#
# MIT License
#
# Copyright (c) 2020-2022 Konychev Valerii
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import sys
import shutil
import argparse
import subprocess

from python.vpy.os import isWin, isLinux, isMacOsX

ROOT = os.path.abspath(os.path.dirname(__file__))
OUTPUT_DIR = os.path.join(ROOT, 'output')
INSTALL_DIR_NAME = 'viponTools'
INSTALL_DIR = os.path.join(OUTPUT_DIR, INSTALL_DIR_NAME)
CMAKE_DIR = os.path.join(ROOT, 'cmake')
TOOLCHAIN_DIR = os.path.join(CMAKE_DIR, 'toolchain')

def parseArgs():
    parser = argparse.ArgumentParser(description = 'Configure viponTools project.')
    parser.add_argument('--release', action = 'store_true',
            help = 'release build instead of debug')
    parser.add_argument('--c-toolchain', metavar = 'PATH', nargs = '?',
            default = os.path.join(TOOLCHAIN_DIR, 'host-clang.cmake'),
            help = 'path to CMAKE_TOOLCHAIN_FILE')
    parser.add_argument('--cmake-path', metavar = 'PATH', nargs = '?',
            default = shutil.which('cmake'),
            help = 'path to special cmake')
    parser.add_argument('--output', metavar = 'DIR_PATH', nargs = '?',
            default = OUTPUT_DIR,
            help = 'name of output directory')
    parser.add_argument('--install-dir', metavar = 'DIR_PATH', nargs = '?',
            default = INSTALL_DIR,
            help = 'name of install directory')
    parser.add_argument('--vs', action = 'store_true',
            default = True if isWin() else False,
            help = 'use visual code build system')
    parser.add_argument('--gmake', action = 'store_true',
            default = True if isLinux() else False,
            help = 'use gnuMake build system')
    parser.add_argument('--ninja', action = 'store_true',
            help = 'use ninjs build system')
    parser.add_argument('--xcode', action = 'store_true',
            default = True if isMacOsX() else False,
            help = 'use xcode build system')
    parser.add_argument('--use-version', metavar = 'VERSION', nargs = '?',
            default = None,
            help = 'specify build system version'
            )

    return parser.parse_args()


def finalizeArgs(args):
    if args.output != OUTPUT_DIR:
        if args.install_dir == INSTALL_DIR:
            args.install_dir = os.path.abspath(os.path.join(args.output, INSTALL_DIR_NAME))
    if isLinux():
        if args.ninja or args.vs or args.xcode:
            args.gmake = False
    if isMacOsX():
        if args.ninja or args.vs or args.gmake:
            args.xcode = False
    if isWin():
        if args.ninja or args.xcode or args.gmake:
            # not VS build system on Win
            args.vs = False
        else:
            # VS build system on Win
            if args.use_version == None:
                args.use_version = '17'


def goToOutputDir(args):
    if not os.path.isdir(args.output):
        try:
            os.makedirs(args.output, mode = 0o755)
        except FileExistsError:
            sys.exit(f'{args.output} already exists and it\'s not directory')

    os.chdir(args.output)


def execCmake(args):
    generator = str()
    if args.gmake:
        generator = 'Unix Makefiles'
    elif args.ninja:
        generator = 'Ninja'
    elif args.vs:
        if args.use_version == '17':
            generator = 'Visual Studio 17 2022'
        elif args.use_version == '16':
            generator = 'Visual Studio 16 2019'
    elif args.xcode:
        generator = 'Xcode'
    else:
        raise "Unknown build system"

    subprocess.check_call(
        [ args.cmake_path
        , '-G'
        , generator
        , '{}'                       .format('-A x64' if args.vs else '')
        , '{}'                       .format('-T ClangCL' if args.vs else '')
        , '-DCMAKE_BUILD_TYPE={}'    .format('Release' if args.release else 'Debug')
        , '-DCMAKE_TOOLCHAIN_FILE={}'.format(args.c_toolchain)
        , '-DCMAKE_INSTALL_PREFIX={}'.format(args.install_dir)
        , '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON'
        , ROOT
        ]
    )


def main():
    args = parseArgs()
    finalizeArgs(args)
    goToOutputDir(args)
    execCmake(args)


if __name__ == '__main__':
    main()

