#!/usr/bin/env python3

import os
import sys
import shutil
import argparse
import subprocess

from python.lib.os import isWin, isLinux, isMacOsX, getForOs

ROOT = os.path.abspath(os.path.dirname(__file__))
CMAKE_DIR = os.path.join(ROOT, 'cmake')
TOOLCHAIN_DIR = os.path.join(CMAKE_DIR, 'toolchain')

def parseArgs():
    parser = argparse.ArgumentParser(description = 'Configure viponTools project.')
    parser.add_argument('--release', action = 'store_true',
            help = 'release build instead of debug')
    parser.add_argument('--c-toolchain', metavar = 'PATH', nargs = '?',
            default = os.path.join(TOOLCHAIN_DIR, 'host-clang.cmake'),
            help = 'path to CMAKE_TOOLCHAIN_FILE')
    parser.add_argument('--cmake-path', metavar = 'PATH', nargs = '?',
            default = shutil.which('cmake'),
            help = 'path to special cmake')
    parser.add_argument('--output', metavar = 'DIR_PATH', nargs = '?',
            default = os.path.join(ROOT, 'output'),
            help = 'name of output directory')
    parser.add_argument('--vs', action = 'store_true',
            default = True if isWin() else False,
            help = 'use visual code build system')
    parser.add_argument('--gmake', action = 'store_true',
            default = True if isLinux() else False,
            help = 'use gnuMake build system')
    parser.add_argument('--ninja', action = 'store_true',
            help = 'use ninjs build system')
    parser.add_argument('--xcode', action = 'store_true',
            default = True if isMacOsX() else False,
            help = 'use xcode build system')

    return parser.parse_args()


def finalizeArgs(args):
    if isLinux():
        if args.ninja or args.vs or args.xcode:
            args.gmake = False
    elif isMacOsX():
        if args.ninja or args.vs or args.gmake:
            args.xcode = False
    elif isWin():
        if args.ninja or args.xcode or args.gmake:
            args.vs = False


def goToOutputDir(args):
    if not os.path.isdir(args.output):
        try:
            os.makedirs(args.output, mode = 0o755)
        except FileExistsError:
            sys.exit(f'{args.output} already exists and it\'s not directory')

    os.chdir(args.output)


def execCmake(args):
    generator = str()
    if args.gmake:
        generator = 'Unix Makefiles'
    elif args.ninja:
        generator = 'Ninja'
    elif args.vs:
        generator = 'Visual Studio 16 2019'
    elif args.xcode:
        generator = 'Xcode'
    else:
        raise "Unknown build system"

    subprocess.check_call(
        [ args.cmake_path
        , '-G'
        , generator
        , '{}'                       .format('-A x64' if args.vs else '')
        , '{}'                       .format('-T ClangCL' if args.vs else '')
        , '-DCMAKE_BUILD_TYPE={}'    .format('Release' if args.release else 'Debug')
        , '-DCMAKE_TOOLCHAIN_FILE={}'.format(args.c_toolchain)
        , '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON'
        , ROOT
        ]
    )


def main():
    args = parseArgs()
    finalizeArgs(args)
    goToOutputDir(args)
    execCmake(args)


if __name__ == '__main__':
    main()

