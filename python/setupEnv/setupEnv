#!/usr/bin/env python3
#
# MIT License
#
# Copyright (c) 2022 Konychev Valera
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
from os.path import dirname, realpath, join
curDir = dirname(realpath(__file__))
vpyDir = dirname(curDir)
sys.path.append(vpyDir)

import subprocess
from enum import Enum
from vpy.readFile import readWithSameIndent, seekLine

DEPS_FILE = 'deps.txt'
KEY_WORDS = ['libs:', 'tools:']

class SetUpQueue:
    class SetUpInstance:
        class InstanceState(Enum):
            NOT_INSTALL = 0
            INSTALLED = 1

        class InstaceType(Enum):
            LIBS = 0
            TOOLS = 1

        def __getInstanceDepsList(self, f):
            deps = list()
            lines = readWithSameIndent(f)
            for l in lines:
                deps.append(l.strip())

            return deps

        def __init__(self, f, t: InstaceType):
            name = f.readline().strip()
            if (name == '') or (name in KEY_WORDS):
                self.name = ''
                return

            self.name = name
            self.type = t
            self.status = SetUpQueue.SetUpInstance.InstanceState.NOT_INSTALL
            self.depsList = None
            if self.name[-1] == ':':
                self.name = self.name[:-1]
                self.depsList = self.__getInstanceDepsList(f)

        def __str__(self):
            s = f'{self.name}'
            if self.depsList is None:
                return s
            else:
                s += ':'

            for d in self.depsList:
                s += f'\n\t{d}'

            return s

        def isIndependent(self):
            return (self.depsList == None)

    def __readInstances(self, f, t: SetUpInstance.InstaceType):
        instances = list()
        while True:
            pos = f.tell()
            instance = SetUpQueue.SetUpInstance(f, t)
            if (instance.name == '') or (instance.name in KEY_WORDS):
                f.seek(pos)
                break
            else:
                instances.append(instance)

        return instances

    def __readToolsList(self, f):
        f.seek(0)
        seekLine(f, 'tools:')
        return self.__readInstances(f, SetUpQueue.SetUpInstance.InstaceType.TOOLS)

    def __readLibsList(self, f):
        f.seek(0)
        seekLine(f, 'libs:')
        return self.__readInstances(f, SetUpQueue.SetUpInstance.InstaceType.LIBS)

    def __addInstanceDepsInQueue(self, instance: SetUpInstance) -> None:
        if instance.isIndependent():
            return

        for dep in instance.depsList:
            for i in self.instancesList:
                if i.name == dep:
                    self.__addInstanceDepsInQueue(i)
                    if i not in self.queue:
                        self.queue.append(i)

    def __addInstanceInQueue(self, instance: SetUpInstance) -> None:
        self.__addInstanceDepsInQueue(instance)
        self.queue.append(instance)

    def __createQueue(self):
        fullList = self.toolsList + self.libsList
        for i in fullList:
            self.__addInstanceInQueue(i)

    def __init__(self, fn: str) -> None:
        depsFile = open(fn, 'r')

        self.toolsList = self.__readToolsList(depsFile)
        self.libsList = self.__readLibsList(depsFile)
        self.instancesList = self.toolsList + self.libsList
        self.queue = list()

        self.__createQueue()
        depsFile.close()

    def __str__(self):
        s = 'tools:'
        for i in self.toolsList:
            s += f'\n{i}'

        s += '\n\nlibs:'
        for i in self.libsList:
            s += f'\n{i}'

        return s

    def printQueue(self):
        for i in self.queue:
            print(i.name)

    def exec(self):
        for i in self.queue:
            com = '.'
            if i.type == SetUpQueue.SetUpInstance.InstaceType.TOOLS:
                com = join(com, 'tools')
            elif i.type == SetUpQueue.SetUpInstance.InstaceType.LIBS:
                com = join(com, 'libs')
            else:
                raise "Unknown instance type"

            com = realpath(join(com, i.name, 'install.py'))
            args = ['python', com]
            subprocess.run(args)

            i.status = SetUpQueue.SetUpInstance.InstanceState.INSTALLED

def main():
    queue = SetUpQueue(DEPS_FILE)
    queue.exec()

if __name__ == '__main__':
    main()

