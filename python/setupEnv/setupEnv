#!/usr/bin/env python3
#
# MIT License
#
# Copyright (c) 2022 Konychev Valera
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
from os.path import dirname, realpath, join
curDir = dirname(realpath(__file__))
vpyDir = dirname(curDir)
sys.path.append(vpyDir)

import argparse
import subprocess
from enum import Enum
from typing import List

from vpy.importHelp import installImport
from vpy.type import isStr, isDict

installImport('yaml', 'pyyaml')
import yaml

DEFAULT_DEPS_FILE = 'deps.txt'
KEY_WORDS = ['libs', 'tools']

class SetUpQueue:
    class SetUpInstance:
        class InstanceState(Enum):
            NOT_INSTALL = 0
            INSTALLED = 1

        class InstaceType(Enum):
            LIBS = 0
            TOOLS = 1

        def __init__(self, name: str, deps: List[str], t: InstaceType):
            self.name = name
            self.deps = deps
            self.type = t
            self.status = SetUpQueue.SetUpInstance.InstanceState.NOT_INSTALL

        def __str__(self):
            s = f'{self.name}'
            if self.deps is None:
                return s
            else:
                s += ':'

            for d in self.deps:
                s += f'\n\t{d}'

            return s

        def isIndependent(self):
            return (self.deps == None)

    def ____parseInstances(self, keyWord: str, t: SetUpInstance.InstaceType) -> None:
        name = None
        deps = None

        isDictionary = isDict(self.yaml[keyWord])
        for i in self.yaml[keyWord]:
            name = i
            if isDictionary:
                deps = self.yaml[keyWord][i]
                if isStr(deps):
                    deps = [deps]
            else:
                deps = None
            instance = SetUpQueue.SetUpInstance(name, deps, t)
            self.instances.append(instance)

    def __parseInstances(self) -> None:
        self.____parseInstances('tools', SetUpQueue.SetUpInstance.InstaceType.TOOLS)
        self.____parseInstances('libs', SetUpQueue.SetUpInstance.InstaceType.LIBS)

    def __addInstanceDepsInQueue(self, instance: SetUpInstance) -> None:
        if instance.isIndependent():
            return

        for dep in instance.deps:
            for i in self.instances:
                if i.name == dep:
                    self.__addInstanceDepsInQueue(i)
                    if i not in self.queue:
                        self.queue.append(i)

    def __addInstanceInQueue(self, instance: SetUpInstance) -> None:
        self.__addInstanceDepsInQueue(instance)
        self.queue.append(instance)

    def __createQueue(self):
        for i in self.instances:
            self.__addInstanceInQueue(i)

    def __init__(self, fn: str) -> None:
        depsFile = open(fn, 'r')
        self.yaml = yaml.safe_load(depsFile)
        self.instances = list()
        self.__parseInstances()
        self.queue = list()
        self.__createQueue()

        depsFile.close()


    def __str__(self):
        s = 'tools:'
        for i in self.instances:
            if i.type == SetUpQueue.SetUpInstance.InstaceType.TOOLS:
                s += f'\n{i}'

        s += '\n\nlibs:'
        for i in self.instances:
            if i.type == SetUpQueue.SetUpInstance.InstaceType.LIBS:
                s += f'\n{i}'

        return s

    def printQueue(self):
        print('SetUpQueue:')
        for i in self.queue:
            print(f'\t{i.name}')

    def exec(self):
        for i in self.queue:
            com = '.'
            if i.type == SetUpQueue.SetUpInstance.InstaceType.TOOLS:
                com = join(com, 'tools')
            elif i.type == SetUpQueue.SetUpInstance.InstaceType.LIBS:
                com = join(com, 'libs')
            else:
                raise "Unknown instance type"

            com = realpath(join(com, i.name, 'install.py'))
            args = ['python', com]
            print(f'Installing {i.name}:')
            print(f'\t{" ".join(args)}')
            subprocess.run(args)

            i.status = SetUpQueue.SetUpInstance.InstanceState.INSTALLED

def parseArgs():
    parser = argparse.ArgumentParser(description = 'Crossplatform tool for setting envinronment.')
    parser.add_argument('-f', '--deps-file', metavar = 'PATH', nargs = '?',
            default = DEFAULT_DEPS_FILE,
            help = 'file contains high-level setup instances and dependencies')

    return parser.parse_args()

def main():
    args = parseArgs()
    queue = SetUpQueue(args.deps_file)
    queue.printQueue()
    queue.exec()

if __name__ == '__main__':
    main()

