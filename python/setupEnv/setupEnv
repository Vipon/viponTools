#!/usr/bin/env python3
#
# MIT License
#
# Copyright (c) 2022 Konychev Valera
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
import os
from os.path import dirname, realpath, join, isabs
curDir = dirname(realpath(__file__))
vpyDir = dirname(curDir)
sys.path.append(vpyDir)

import argparse
from enum import Enum
from typing import List

from vpy.cmd import execCmd
from vpy.importHelp import installImport
from vpy.type import isStr, isList, isDict
from vpy.os import execForOs, get_user_path

installImport('yaml', 'pyyaml')
import yaml

DEFAULT_DEPS_FILE = 'deps.txt'
KEY_WORDS = ['libs', 'tools']

class SetUpQueue:
    class SetUpInstance:
        class InstanceState(Enum):
            NOT_INSTALL = 0
            INSTALLED = 1

        class InstaceType(Enum):
            LIBS = 0
            TOOLS = 1

        def __init__( self
                    , name : str
                    , ver  : str
                    , dir  : str
                    , deps : List[str]
                    , t    : InstaceType
                    ):
            self.name = name
            self.ver = ver
            self.dir = dir
            self.deps = deps
            self.type = t
            self.status = SetUpQueue.SetUpInstance.InstanceState.NOT_INSTALL

        def __str__(self):
            s = f'{self.name}'
            if (self.ver is None) and (self.dir is None):
                if self.deps is None:
                    return s
                else:
                    for d in self.deps:
                        s += f'\n\t{d}'
                    return s
            else:
                s += ':'

            if self.ver is not None:
                s += f'\n\tver: {self.ver}'

            if self.dir is not None:
                s += f'\n\tdir: {self.dir}'

            if self.deps is not None:
                s += f'\n\tdeps:'
                for d in self.deps:
                    s += f'\n\t\t{d}'

            return s

        def isIndependent(self):
            return (self.deps == None)

    def __parseInstanceParam(self, params):
        def getOsParam(p):
            def getLinuxParam(p):
                if 'linux' in p:
                    return p['linux']
                else:
                    if isStr(p):
                        return p
                    else:
                        return None
            def getMacParam(p):
                if 'mac' in p:
                    return p['mac']
                else:
                    if isStr(p):
                        return p
                    else:
                        return None
            def getWinParam(p):
                if 'win' in p:
                    return p['win']
                else:
                    if isStr(p):
                        return p
                    else:
                        return None
            return execForOs(
                linux = getLinuxParam,
                largs = p,
                mac = getMacParam,
                margs = p,
                win = getWinParam,
                wargs = p,
            )
        ver  = None
        dir  = None
        deps = None

        if isList(params):
            deps = params

        if 'ver' in params:
            ver = getOsParam(params['ver'])
        if 'dir' in params:
            dir = getOsParam(params['dir'])
        if 'deps' in params:
            deps = getOsParam(params['deps'])

        return (ver, dir, deps)

    def __fixDirPath(self, dir):
        if dir == None:
            return

        if isabs(dir):
            return realpath(dir)
        else:
            return realpath(join(dirname(self.fn), dir))

    def __fixDeps(self, deps):
        if deps == None:
            return

        if isStr(deps):
            return [deps]

    def ____parseInstances(self, keyWord: str, t: SetUpInstance.InstaceType) -> None:
        name = None
        ver  = None
        dir  = None
        deps = None

        for i in self.yaml[keyWord]:
            if isDict(i):
                for j in i:
                    name = j
                    params = i[j]
                    (ver, dir, deps) = self.__parseInstanceParam(params)
                    dir = self.__fixDirPath(dir)
                    deps = self.__fixDeps(deps)
            else:
                name = i
                if isDict(self.yaml[keyWord]):
                    params = self.yaml[keyWord][i]
                    (ver, dir, deps) = self.__parseInstanceParam(params)
                    dir = self.__fixDirPath(dir)
                    deps = self.__fixDeps(deps)
                else:
                    ver  = None
                    dir  = None
                    deps = None

            instance = SetUpQueue.SetUpInstance(name, ver, dir, deps, t)
            self.instances.append(instance)

    def __parseInstances(self) -> None:
        if 'tools' in self.yaml:
            self.____parseInstances('tools', SetUpQueue.SetUpInstance.InstaceType.TOOLS)
        if 'libs' in self.yaml:
            self.____parseInstances('libs', SetUpQueue.SetUpInstance.InstaceType.LIBS)

    def __addInstanceDepsInQueue(self, instance: SetUpInstance) -> None:
        if instance.isIndependent():
            return

        for dep in instance.deps:
            i_count = 0
            for i in self.instances:
                if i.name == dep:
                    self.__addInstanceDepsInQueue(i)
                    if i not in self.queue:
                        self.queue.append(i)
                else:
                    i_count += 1

            if i_count == len(self.instances):
                print(f'Cannot find dependence "{dep}" for instance "{instance.name}"')
                exit(-1)

    def __addInstanceInQueue(self, instance: SetUpInstance) -> None:
        self.__addInstanceDepsInQueue(instance)
        self.queue.append(instance)

    def __createQueue(self):
        for i in self.instances:
            self.__addInstanceInQueue(i)

    def __init__(self, fn: str) -> None:
        depsFile = open(fn, 'r')
        self.fn = fn
        self.yaml = yaml.safe_load(depsFile)
        self.instances = list()
        self.__parseInstances()
        self.queue = list()
        self.__createQueue()

        depsFile.close()

    def __str__(self):
        s = 'tools:'
        for i in self.instances:
            if i.type == SetUpQueue.SetUpInstance.InstaceType.TOOLS:
                s += f'\n{i}'

        s += '\n\nlibs:'
        for i in self.instances:
            if i.type == SetUpQueue.SetUpInstance.InstaceType.LIBS:
                s += f'\n{i}'

        return s

    def printQueue(self):
        print('SetUpQueue:')
        for i in self.queue:
            print(f'\t{i.name}', flush=True)

    def exec(self):
        for i in self.queue:
            script = dirname(__file__)
            if i.type == SetUpQueue.SetUpInstance.InstaceType.TOOLS:
                script = join(script, 'tools')
            elif i.type == SetUpQueue.SetUpInstance.InstaceType.LIBS:
                script = join(script, 'libs')
            else:
                raise "Unknown instance type"

            script = realpath(join(script, i.name, 'install.py'))
            args = [sys.executable, script]
            if i.ver is not None:
                args += ['--install-version', str(i.ver)]
            if i.dir is not None:
                args += ['--install-prefix', i.dir]
            print(f'Installing {i.name}:', flush=True)
            env = None
            if os.name == "nt":
                # Previous installations can update user's PATH
                env = dict(os.environ)
                env['PATH'] = get_user_path()
            execCmd(args, env)

            i.status = SetUpQueue.SetUpInstance.InstanceState.INSTALLED

def parseArgs():
    parser = argparse.ArgumentParser(description = 'Crossplatform tool for setting envinronment.')
    parser.add_argument('-f', '--deps-file', metavar = 'PATH', nargs = '?',
            default = DEFAULT_DEPS_FILE,
            help = 'file contains high-level setup instances and dependencies')

    return parser.parse_args()

def main():
    args = parseArgs()
    queue = SetUpQueue(args.deps_file)
    queue.printQueue()
    queue.exec()

if __name__ == '__main__':
    main()

